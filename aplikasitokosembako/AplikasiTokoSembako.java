/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package aplikasitokosembako;

import java.awt.Toolkit;
import java.sql.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;


/**
 *
 * @author akbaroke
 */
public class AplikasiTokoSembako extends javax.swing.JFrame {

    /**
     * Creates new form AplikasiTokoSembako
     */
    public AplikasiTokoSembako() {
        // cek session
        if(Session.session.getSession() == null){
            Login login = new Login();
            this.setVisible(false);
            login.setVisible(true);
        }else{
            setIcon();
            initComponents();
            setHeaderName();
            showTabelBarang();
        }
    }
    
    
    public final void setHeaderName(){
        try {
            Connection conn = Koneksi.ConnectDB();
            String query = "SELECT * FROM tb_users WHERE id='"+Session.session.getSession()+"'";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(query);
            String namaToko = "null";
            while(rs.next()){
                namaToko = rs.getString("nama_toko");
            }
            NamaToko.setText(namaToko);
            NamaToko_struk.setText(namaToko);
           
        } catch (SQLException e) {
            System.out.println("Data barang Gagal di tampilkan...");
            System.out.println(e);
        }
    }
     public void RefreshTampilanAdmin(){
        showTabelBarang();
        FilterTabel.setSelectedItem("-Pilih-");
        FieldCari.setSelectedItem("-Pilih-");
        cmbKategori_Tambah.setSelectedItem("-Pilih-");
        txtCariBarang.setText("");
        txtNama_Tambah.setText("");
        txtHarga_Tambah.setText("");
        txtStok_Tambah.setText("");
        txtKode_Hapus.setText("");
        txtNama_Ubah.setText("");
        txtHarga_Ubah.setText("");
        txtStok_Ubah.setText("");
        kodeUbahBarang = null;
        lblKode_Ubah.setText("-");
    }
    
    
    private DefaultTableModel tableModel;
    private ResultSet resultSet;
    public final void showTabelBarang(){
        
        try {
            Connection conn = Koneksi.ConnectDB();
            
            Object[] columnTitle = {"No.","Kode","Nama Barang","Harga","Stok"};
            tableModel = new DefaultTableModel(null,columnTitle);
            TabelBarang.setModel(tableModel);
            Statement statement = conn.createStatement();
            tableModel.getDataVector().removeAllElements();
            
            resultSet = statement.executeQuery("SELECT * FROM tb_barang WHERE id_user='"+Session.session.getSession()+"'");
            int i = 1;
            while(resultSet.next()){
                Object[] data = {
                    i++,
                    resultSet.getString("kode"),
                    resultSet.getString("nama"),
                    resultSet.getString("harga"),
                    resultSet.getString("stok")
                };
                tableModel.addRow(data);
            }
            
        } catch (SQLException e) {
            System.out.println("Data barang Gagal di tampilkan...");
            System.out.println(e);
        }
    }
    
   
    
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnSimpan_UbahBarang = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        txtKode_Hapus = new javax.swing.JTextField();
        txtStok_Tambah = new javax.swing.JTextField();
        txtStok_Ubah = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        FieldCari = new javax.swing.JComboBox<>();
        FilterTabel = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        txtHarga_Tambah = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        btnSimpan_Tambah = new javax.swing.JButton();
        cmbKategori_Tambah = new javax.swing.JComboBox<>();
        txtHarga_Ubah = new javax.swing.JTextField();
        txtNama_Ubah = new javax.swing.JTextField();
        txtCariBarang = new javax.swing.JTextField();
        txtNama_Tambah = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        TabelBarang = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        lblKode_Ubah = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        NamaToko = new javax.swing.JLabel();
        NamaToko_struk = new javax.swing.JLabel();
        link_history = new javax.swing.JButton();
        link_logout = new javax.swing.JButton();
        btnHapus_Barang = new javax.swing.JButton();
        btnCariBarang = new javax.swing.JButton();
        btnRefreshAdmin = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("APLIKASI TOKO SEMBAKO");
        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(1440, 960));
        getContentPane().setLayout(null);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Stok            :");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(400, 650, 90, 17);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Stok            :");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(90, 600, 90, 17);

        btnSimpan_UbahBarang.setBackground(new java.awt.Color(0, 0, 0));
        btnSimpan_UbahBarang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/btn-simpan.png"))); // NOI18N
        btnSimpan_UbahBarang.setBorder(null);
        btnSimpan_UbahBarang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSimpan_UbahBarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpan_UbahBarangActionPerformed(evt);
            }
        });
        getContentPane().add(btnSimpan_UbahBarang);
        btnSimpan_UbahBarang.setBounds(480, 720, 90, 30);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Kode          :");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(90, 830, 90, 17);

        txtKode_Hapus.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        getContentPane().add(txtKode_Hapus);
        txtKode_Hapus.setBounds(180, 830, 150, 30);

        txtStok_Tambah.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        getContentPane().add(txtStok_Tambah);
        txtStok_Tambah.setBounds(180, 600, 160, 30);

        txtStok_Ubah.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        getContentPane().add(txtStok_Ubah);
        txtStok_Ubah.setBounds(490, 650, 160, 30);

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Harga         :");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(90, 550, 90, 17);

        FieldCari.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        FieldCari.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Pilih-", "Kode", "Nama", "Harga", "Stok" }));
        FieldCari.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(FieldCari);
        FieldCari.setBounds(460, 400, 140, 30);

        FilterTabel.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        FilterTabel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Pilih-", "Harga Termurah", "Harga Termahal", "Stok", "Kat. Makanan", "Kat. Minuman", "Kat. Lain-lain" }));
        FilterTabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        FilterTabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterTabelActionPerformed(evt);
            }
        });
        getContentPane().add(FilterTabel);
        FilterTabel.setBounds(180, 360, 150, 30);

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Kategori     :");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(90, 650, 90, 17);

        txtHarga_Tambah.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        getContentPane().add(txtHarga_Tambah);
        txtHarga_Tambah.setBounds(180, 550, 160, 30);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Harga         :");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(400, 600, 90, 17);

        btnSimpan_Tambah.setBackground(new java.awt.Color(0, 0, 0));
        btnSimpan_Tambah.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/btn-simpan.png"))); // NOI18N
        btnSimpan_Tambah.setBorder(null);
        btnSimpan_Tambah.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSimpan_Tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpan_TambahActionPerformed(evt);
            }
        });
        getContentPane().add(btnSimpan_Tambah);
        btnSimpan_Tambah.setBounds(170, 720, 90, 30);

        cmbKategori_Tambah.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        cmbKategori_Tambah.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Pilih-", "Makanan", "Minuman", "Lain-lain" }));
        cmbKategori_Tambah.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbKategori_Tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbKategori_TambahActionPerformed(evt);
            }
        });
        getContentPane().add(cmbKategori_Tambah);
        cmbKategori_Tambah.setBounds(180, 650, 160, 30);

        txtHarga_Ubah.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        getContentPane().add(txtHarga_Ubah);
        txtHarga_Ubah.setBounds(490, 600, 160, 30);

        txtNama_Ubah.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        getContentPane().add(txtNama_Ubah);
        txtNama_Ubah.setBounds(490, 550, 160, 30);

        txtCariBarang.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        getContentPane().add(txtCariBarang);
        txtCariBarang.setBounds(460, 360, 140, 30);

        txtNama_Tambah.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        getContentPane().add(txtNama_Tambah);
        txtNama_Tambah.setBounds(180, 500, 160, 30);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(null);

        TabelBarang.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TabelBarang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No.", "Kode", "Nama Barang", "Harga", "Stok"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TabelBarang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TabelBarang.setGridColor(new java.awt.Color(204, 204, 204));
        TabelBarang.setRowHeight(25);
        TabelBarang.setSelectionBackground(new java.awt.Color(204, 204, 204));
        TabelBarang.setSelectionForeground(new java.awt.Color(1, 1, 1));
        TabelBarang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TabelBarangMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(TabelBarang);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(80, 220, 580, 130);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Field     :");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(390, 400, 60, 17);

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Nama         :");
        getContentPane().add(jLabel19);
        jLabel19.setBounds(90, 500, 80, 17);

        lblKode_Ubah.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblKode_Ubah.setForeground(new java.awt.Color(250, 216, 16));
        lblKode_Ubah.setText("-");
        getContentPane().add(lblKode_Ubah);
        lblKode_Ubah.setBounds(490, 500, 160, 20);

        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("Kode         :");
        getContentPane().add(jLabel27);
        jLabel27.setBounds(400, 500, 80, 17);

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Nama         :");
        getContentPane().add(jLabel29);
        jLabel29.setBounds(400, 550, 90, 17);

        jLabel17.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(250, 216, 16));
        jLabel17.setText("dan hapus pada tabel di atas.");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(490, 860, 200, 17);

        jLabel28.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(250, 216, 16));
        jLabel28.setText("* klik data barang yang akan diubah");
        getContentPane().add(jLabel28);
        jLabel28.setBounds(450, 840, 240, 17);

        NamaToko.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        NamaToko.setForeground(new java.awt.Color(255, 255, 255));
        NamaToko.setText("Nama Toko");
        getContentPane().add(NamaToko);
        NamaToko.setBounds(130, 30, 280, 70);

        NamaToko_struk.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        NamaToko_struk.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(NamaToko_struk);
        NamaToko_struk.setBounds(1580, 470, 160, 0);

        link_history.setBackground(new java.awt.Color(0, 0, 0));
        link_history.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/btn-History.png"))); // NOI18N
        link_history.setBorder(null);
        link_history.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        link_history.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                link_historyActionPerformed(evt);
            }
        });
        getContentPane().add(link_history);
        link_history.setBounds(540, 50, 80, 40);

        link_logout.setBackground(new java.awt.Color(0, 0, 0));
        link_logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/btn-logout.png"))); // NOI18N
        link_logout.setBorder(null);
        link_logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        link_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                link_logoutActionPerformed(evt);
            }
        });
        getContentPane().add(link_logout);
        link_logout.setBounds(630, 50, 80, 40);

        btnHapus_Barang.setBackground(new java.awt.Color(0, 0, 0));
        btnHapus_Barang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/btn-hapus.png"))); // NOI18N
        btnHapus_Barang.setBorder(null);
        btnHapus_Barang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHapus_Barang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapus_BarangActionPerformed(evt);
            }
        });
        getContentPane().add(btnHapus_Barang);
        btnHapus_Barang.setBounds(340, 830, 50, 30);

        btnCariBarang.setBackground(new java.awt.Color(0, 0, 0));
        btnCariBarang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/btn-cari_1.png"))); // NOI18N
        btnCariBarang.setBorder(null);
        btnCariBarang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCariBarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariBarangActionPerformed(evt);
            }
        });
        getContentPane().add(btnCariBarang);
        btnCariBarang.setBounds(610, 360, 50, 30);

        btnRefreshAdmin.setBackground(new java.awt.Color(0, 0, 0));
        btnRefreshAdmin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/btn-refresh.png"))); // NOI18N
        btnRefreshAdmin.setBorder(null);
        btnRefreshAdmin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefreshAdmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRefreshAdminMouseClicked(evt);
            }
        });
        btnRefreshAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshAdminActionPerformed(evt);
            }
        });
        getContentPane().add(btnRefreshAdmin);
        btnRefreshAdmin.setBounds(610, 160, 50, 30);

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Cari      :");
        getContentPane().add(jLabel18);
        jLabel18.setBounds(390, 360, 60, 17);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Filter Tabel :");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(90, 360, 100, 17);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/bg-tokoSembako.png"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 720, 950);

        setSize(new java.awt.Dimension(1936, 1276));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void FilterTabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterTabelActionPerformed
        // TODO add your handling code here:
        String selectedValue = FilterTabel.getSelectedItem().toString();
        switch (selectedValue) {
            case "Harga Termurah" -> {
                try {
                    Connection conn = Koneksi.ConnectDB();

                    Object[] columnTitle = {"No.","Kode","Nama Barang","Harga","Stok"};
                    tableModel = new DefaultTableModel(null,columnTitle);
                    TabelBarang.setModel(tableModel);
                    Statement statement = conn.createStatement();
                    tableModel.getDataVector().removeAllElements();

                    resultSet = statement.executeQuery("SELECT * FROM tb_barang WHERE id_user='"+Session.session.getSession()+"' ORDER BY harga ASC ");
                    int i = 1;
                    while(resultSet.next()){
                        Object[] data = {
                            i++,
                            resultSet.getString("kode"),
                            resultSet.getString("nama"),
                            resultSet.getString("harga"),
                            resultSet.getString("stok")
                        };
                        tableModel.addRow(data);
                    }

                } catch (SQLException e) {
                    System.out.println("Data barang Gagal di tampilkan...");
                    System.out.println(e);
                }
            }
            case "Harga Termahal" -> {
                try {
                    Connection conn = Koneksi.ConnectDB();

                    Object[] columnTitle = {"No.","Kode","Nama Barang","Harga","Stok"};
                    tableModel = new DefaultTableModel(null,columnTitle);
                    TabelBarang.setModel(tableModel);
                    Statement statement = conn.createStatement();
                    tableModel.getDataVector().removeAllElements();

                    resultSet = statement.executeQuery("SELECT * FROM tb_barang WHERE id_user='"+Session.session.getSession()+"' ORDER BY harga DESC");
                    int i = 1;
                    while(resultSet.next()){
                        Object[] data = {
                            i++,
                            resultSet.getString("kode"),
                            resultSet.getString("nama"),
                            resultSet.getString("harga"),
                            resultSet.getString("stok")
                        };
                        tableModel.addRow(data);
                    }

                } catch (SQLException e) {
                    System.out.println("Data barang Gagal di tampilkan...");
                    System.out.println(e);
                }
            }
            case "Stok" -> {
                try {
                    Connection conn = Koneksi.ConnectDB();

                    Object[] columnTitle = {"No.","Kode","Nama Barang","Harga","Stok"};
                    tableModel = new DefaultTableModel(null,columnTitle);
                    TabelBarang.setModel(tableModel);
                    Statement statement = conn.createStatement();
                    tableModel.getDataVector().removeAllElements();

                    resultSet = statement.executeQuery("SELECT * FROM tb_barang WHERE id_user='"+Session.session.getSession()+"' ORDER BY stok ASC");
                    int i = 1;
                    while(resultSet.next()){
                        Object[] data = {
                            i++,
                            resultSet.getString("kode"),
                            resultSet.getString("nama"),
                            resultSet.getString("harga"),
                            resultSet.getString("stok")
                        };
                        tableModel.addRow(data);
                    }

                } catch (SQLException e) {
                    System.out.println("Data barang Gagal di tampilkan...");
                    System.out.println(e);
                }
            }
            case "Kat. Makanan" -> {
                try {
                    Connection conn = Koneksi.ConnectDB();

                    Object[] columnTitle = {"No.","Kode","Nama Barang","Harga","Stok"};
                    tableModel = new DefaultTableModel(null,columnTitle);
                    TabelBarang.setModel(tableModel);
                    Statement statement = conn.createStatement();
                    tableModel.getDataVector().removeAllElements();

                    resultSet = statement.executeQuery("SELECT * FROM tb_barang WHERE id_user='"+Session.session.getSession()+"' AND kategori='Makanan'");
                    int i = 1;
                    while(resultSet.next()){
                        Object[] data = {
                            i++,
                            resultSet.getString("kode"),
                            resultSet.getString("nama"),
                            resultSet.getString("harga"),
                            resultSet.getString("stok")
                        };
                        tableModel.addRow(data);
                    }

                } catch (SQLException e) {
                    System.out.println(e);
                }
            }
            case "Kat. Minuman" -> {
                try {
                    Connection conn = Koneksi.ConnectDB();

                    Object[] columnTitle = {"No.","Kode","Nama Barang","Harga","Stok"};
                    tableModel = new DefaultTableModel(null,columnTitle);
                    TabelBarang.setModel(tableModel);
                    Statement statement = conn.createStatement();
                    tableModel.getDataVector().removeAllElements();

                    resultSet = statement.executeQuery("SELECT * FROM tb_barang WHERE id_user='"+Session.session.getSession()+"' AND kategori='Minuman'");
                    int i = 1;
                    while(resultSet.next()){
                        Object[] data = {
                            i++,
                            resultSet.getString("kode"),
                            resultSet.getString("nama"),
                            resultSet.getString("harga"),
                            resultSet.getString("stok")
                        };
                        tableModel.addRow(data);
                    }

                } catch (SQLException e) {
                    System.out.println("Data barang Gagal di tampilkan...");
                    System.out.println(e);
                }
            }
            case "Kat. Lain-lain" -> {
                try {
                    Connection conn = Koneksi.ConnectDB();

                    Object[] columnTitle = {"No.","Kode","Nama Barang","Harga","Stok"};
                    tableModel = new DefaultTableModel(null,columnTitle);
                    TabelBarang.setModel(tableModel);
                    Statement statement = conn.createStatement();
                    tableModel.getDataVector().removeAllElements();

                    resultSet = statement.executeQuery("SELECT * FROM tb_barang WHERE id_user='"+Session.session.getSession()+"' AND kategori='Lain-lain'");
                    int i = 1;
                    while(resultSet.next()){
                        Object[] data = {
                            i++,
                            resultSet.getString("kode"),
                            resultSet.getString("nama"),
                            resultSet.getString("harga"),
                            resultSet.getString("stok")
                        };
                        tableModel.addRow(data);
                    }

                } catch (SQLException e) {
                    System.out.println("Data barang Gagal di tampilkan...");
                    System.out.println(e);
                }
            }
            default -> showTabelBarang();
        }
    }//GEN-LAST:event_FilterTabelActionPerformed

    private void cmbKategori_TambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbKategori_TambahActionPerformed
        
    }//GEN-LAST:event_cmbKategori_TambahActionPerformed

    private void btnRefreshAdminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshAdminMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshAdminMouseClicked

    private void btnRefreshAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshAdminActionPerformed
        // TODO add your handling code here:
        RefreshTampilanAdmin();
    }//GEN-LAST:event_btnRefreshAdminActionPerformed

    private void btnCariBarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariBarangActionPerformed
        // TODO add your handling code here:
        FilterTabel.setSelectedItem("-Pilih-");
        if(!txtCariBarang.getText().isEmpty() && !txtCariBarang.getText().isBlank() && FieldCari.getSelectedItem() != "-Pilih-"){
            try {
                Connection conn = Koneksi.ConnectDB();
                Object[] columnTitle = {"No.","Kode","Nama Barang","Harga","Stok"};
                tableModel = new DefaultTableModel(null,columnTitle);
                TabelBarang.setModel(tableModel);
                Statement statement = conn.createStatement();
                tableModel.getDataVector().removeAllElements();

                resultSet = statement.executeQuery("SELECT * FROM tb_barang WHERE id_user='"+Session.session.getSession()+"' AND "+FieldCari.getSelectedItem()+" LIKE '%"+txtCariBarang.getText()+"%'");
                int i = 1;
                while(resultSet.next()){
                    Object[] data = {
                        i++,
                        resultSet.getString("kode"),
                        resultSet.getString("nama"),
                        resultSet.getString("harga"),
                        resultSet.getString("stok")
                    };
                    tableModel.addRow(data);
                }
                if(i == 1){
                    JOptionPane.showMessageDialog(rootPane, "Oopss...\nMohon Maaf, Data tidak ditemukan!", "Gagal", JOptionPane.INFORMATION_MESSAGE);
                    showTabelBarang();
                }
            } catch (SQLException e) {
                System.out.println("Data barang Gagal di tampilkan...");
                System.out.println(e);
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "Oopss...\nInputan pencarian harus diisi dengan benar!", "Gagal", JOptionPane.ERROR_MESSAGE);
            showTabelBarang();
        }
    }//GEN-LAST:event_btnCariBarangActionPerformed

    private void btnSimpan_TambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpan_TambahActionPerformed
        // TODO add your handling code here:
        String nama = txtNama_Tambah.getText();
        String harga = txtHarga_Tambah.getText();
        String stok = txtStok_Tambah.getText();
        String kategori = (String) cmbKategori_Tambah.getSelectedItem();
        
        if(!nama.isEmpty() && !nama.isBlank() && !harga.isEmpty() && !harga.isBlank() && !stok.isEmpty() && !stok.isBlank() && !"-Pilih-".equals(kategori)){
            if (harga.matches("\\d+")) {
                if(stok.matches("\\d+")){
                   if(Integer.parseInt(harga) >= 0){
                       if(Integer.parseInt(stok) > 0){
                            // generate kode barang
                            try {
                                Connection conn = Koneksi.ConnectDB();
                                String query = "SELECT * FROM tb_barang WHERE id_user='"+Session.session.getSession()+"' AND kategori='"+ kategori+"'";
                                Statement st = conn.createStatement();
                                ResultSet rs = st.executeQuery(query);
                                int idAkhir = 0;
                                String resKode = "";
                                while(rs.next()){
                                    idAkhir++;
                                    resKode = rs.getString("kode");
                                }
                                
                                resKode = resKode.replace("MA", "");
                                resKode = resKode.replace("MI", "");
                                resKode = resKode.replace("LA", "");
                                
                                
                                if(idAkhir == 0){
                                    idAkhir++;
                                }else{
                                    idAkhir = Integer.parseInt(resKode) + 1;
                                }
                                
                                String kodeBarang;
                                if("Makanan".equals(kategori)){ 
                                    kodeBarang = idAkhir + "MA";
                                }else if("Minuman".equals(kategori)){
                                    kodeBarang = idAkhir + "MI";
                                }else{
                                    kodeBarang = idAkhir + "LA";
                                }
                                
                                String insrt = "INSERT INTO `tb_barang`(`kode`, `id_user`, `nama`, `harga`, `stok`, `kategori`) VALUES ('"+kodeBarang+"','"+Session.session.getSession()+"','"+nama+"','"+harga+"','"+stok+"','"+kategori+"')";
                                PreparedStatement preStmt = conn.prepareStatement(insrt);
                                preStmt.execute();
                                JOptionPane.showMessageDialog(rootPane, "Berhasil.. \nBarang berhasil ditambahkan!", "Berhasil", JOptionPane.INFORMATION_MESSAGE);
                                RefreshTampilanAdmin();
                                
                            } catch (SQLException e) {
                                JOptionPane.showMessageDialog(rootPane, "Oopss...\nData ditolak!", "Gagal", JOptionPane.ERROR_MESSAGE);
                                System.out.println(e);
                                RefreshTampilanAdmin();
                            }
                       }else{
                           JOptionPane.showMessageDialog(rootPane, "Oopss...\nMinimum stok adalah 1", "Gagal", JOptionPane.ERROR_MESSAGE);
                       }
                   }else{
                       JOptionPane.showMessageDialog(rootPane, "Oopss...\nMinimum Harga adalah Rp 0", "Gagal", JOptionPane.ERROR_MESSAGE);
                   }
                }else{
                    JOptionPane.showMessageDialog(rootPane, "Oopss...\nStok hanya boleh berupa Angka!", "Gagal", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Oopss...\nHarga hanya boleh berupa Angka!", "Gagal", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "Oopss...\nData harus diisi dengan benar!", "Gagal", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSimpan_TambahActionPerformed

    private void btnHapus_BarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapus_BarangActionPerformed
        // TODO add your handling code here:\
        
        try {
            Connection conn = Koneksi.ConnectDB();
            String query = "SELECT * FROM tb_barang WHERE id_user='"+Session.session.getSession()+"' AND kode='"+ txtKode_Hapus.getText() +"'";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(query);
            String resNama = null;
            while(rs.next()){
                resNama = rs.getString("nama");
            }
            
            if(resNama == null){
                JOptionPane.showMessageDialog(rootPane, "Oopss...\nData tidak ditemukan!", "Gagal", JOptionPane.ERROR_MESSAGE);
                RefreshTampilanAdmin();
            }else{
                int Pilih = JOptionPane.showConfirmDialog(rootPane,"Yakin akan menghapus data ini ?\nKode  :  "+txtKode_Hapus.getText()+"\nNama  :  "+resNama+"\n\n","Konfirmasi",JOptionPane.OK_CANCEL_OPTION);
                if(Pilih == JOptionPane.OK_OPTION){
                    String delete = "DELETE FROM `tb_barang` WHERE id_user='"+Session.session.getSession()+"' AND kode='"+ txtKode_Hapus.getText() +"'";
                    PreparedStatement prs = conn.prepareStatement(delete);
                    prs.execute();
                    JOptionPane.showMessageDialog(rootPane, "Berhasil.. \nBarang berhasil diHapus!", "Berhasil", JOptionPane.INFORMATION_MESSAGE);
                    RefreshTampilanAdmin();
                }else if(Pilih == JOptionPane.CANCEL_OPTION){
                    RefreshTampilanAdmin();
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(rootPane, "Oopss...\nData tidak ditemukan!", "Gagal", JOptionPane.ERROR_MESSAGE);
            RefreshTampilanAdmin();
        }
    }//GEN-LAST:event_btnHapus_BarangActionPerformed

    String kodeUbahBarang = null;
    private void TabelBarangMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabelBarangMousePressed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel)TabelBarang.getModel();
        int selectedRowIndex = TabelBarang.getSelectedRow();
        
        txtNama_Ubah.setText(model.getValueAt(selectedRowIndex, 2).toString());
        txtHarga_Ubah.setText(model.getValueAt(selectedRowIndex, 3).toString());
        txtStok_Ubah.setText(model.getValueAt(selectedRowIndex, 4).toString());
        
        kodeUbahBarang = model.getValueAt(selectedRowIndex, 1).toString();
        lblKode_Ubah.setText(kodeUbahBarang);
        txtKode_Hapus.setText(kodeUbahBarang);
    }//GEN-LAST:event_TabelBarangMousePressed

    private void btnSimpan_UbahBarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpan_UbahBarangActionPerformed
        // TODO add your handling code here:
        String nama = txtNama_Ubah.getText();
        String harga = txtHarga_Ubah.getText();
        String stok = txtStok_Ubah.getText();
        
        if(kodeUbahBarang == null){
            JOptionPane.showMessageDialog(rootPane, "Oopss...\nPilih data yang akan diubah pada tabel di atas!", "Gagal", JOptionPane.ERROR_MESSAGE);
        }else{
            if(!nama.isEmpty() && !nama.isBlank() && !harga.isEmpty() && !harga.isBlank() && !stok.isEmpty() && !stok.isBlank()){
                if (harga.matches("\\d+")) {
                    if(stok.matches("\\d+")){
                        if(Integer.parseInt(harga) >= 0){
                            if(Integer.parseInt(stok) > 0){
                                // generate kode barang
                                try {
                                    Connection conn = Koneksi.ConnectDB();
                                    String insrt = "UPDATE `tb_barang` SET `nama`='"+nama+"',`harga`='"+harga+"',`stok`='"+stok+"' WHERE id_user='"+Session.session.getSession()+"' AND `kode`='"+kodeUbahBarang+"'";
                                    PreparedStatement preStmt = conn.prepareStatement(insrt);
                                    preStmt.execute();
                                    JOptionPane.showMessageDialog(rootPane, "Berhasil.. \nBarang berhasil diubah!", "Berhasil", JOptionPane.INFORMATION_MESSAGE);
                                    RefreshTampilanAdmin();

                                } catch (SQLException e) {
                                    JOptionPane.showMessageDialog(rootPane, "Oopss...\nData ditolak!", "Gagal", JOptionPane.ERROR_MESSAGE);
                                    System.out.println(e);
                                    RefreshTampilanAdmin();
                                }
                            }else{
                                JOptionPane.showMessageDialog(rootPane, "Oopss...\nMinimum stok adalah 1", "Gagal", JOptionPane.ERROR_MESSAGE);
                            }
                        }else{
                            JOptionPane.showMessageDialog(rootPane, "Oopss...\nMinimum Harga adalah Rp 0", "Gagal", JOptionPane.ERROR_MESSAGE);
                        }
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "Oopss...\nStok hanya boleh berupa Angka!", "Gagal", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Oopss...\nHarga hanya boleh berupa Angka!", "Gagal", JOptionPane.ERROR_MESSAGE);
                }
            }else{
                JOptionPane.showMessageDialog(rootPane, "Oopss...\nData harus diisi dengan benar!", "Gagal", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSimpan_UbahBarangActionPerformed

    private void link_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_link_logoutActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        
        int Pilih = JOptionPane.showConfirmDialog(rootPane,"Yakin ingin logout?","Konfirmasi",JOptionPane.OK_CANCEL_OPTION);
        if(Pilih == JOptionPane.OK_OPTION){
            //set session
            Session.session.setSession(null);
            Login login = new Login();
            this.setVisible(false);
            login.setVisible(true);
            
        }else if(Pilih == JOptionPane.CANCEL_OPTION){
            RefreshTampilanAdmin();
        }
                                            
       
    }//GEN-LAST:event_link_logoutActionPerformed

    private void link_historyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_link_historyActionPerformed

    }//GEN-LAST:event_link_historyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AplikasiTokoSembako.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AplikasiTokoSembako.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AplikasiTokoSembako.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AplikasiTokoSembako.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AplikasiTokoSembako().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> FieldCari;
    private javax.swing.JComboBox<String> FilterTabel;
    private javax.swing.JLabel NamaToko;
    private javax.swing.JLabel NamaToko_struk;
    private javax.swing.JTable TabelBarang;
    private javax.swing.JButton btnCariBarang;
    private javax.swing.JButton btnHapus_Barang;
    private javax.swing.JButton btnRefreshAdmin;
    private javax.swing.JButton btnSimpan_Tambah;
    private javax.swing.JButton btnSimpan_UbahBarang;
    private javax.swing.JComboBox<String> cmbKategori_Tambah;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblKode_Ubah;
    private javax.swing.JButton link_history;
    private javax.swing.JButton link_logout;
    private javax.swing.JTextField txtCariBarang;
    private javax.swing.JTextField txtHarga_Tambah;
    private javax.swing.JTextField txtHarga_Ubah;
    private javax.swing.JTextField txtKode_Hapus;
    private javax.swing.JTextField txtNama_Tambah;
    private javax.swing.JTextField txtNama_Ubah;
    private javax.swing.JTextField txtStok_Tambah;
    private javax.swing.JTextField txtStok_Ubah;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("../assets/icon-apk.png")));
    }
}
